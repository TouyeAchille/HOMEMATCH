{"spans": [{"name": "llm_text_retrieval", "context": {"span_id": "0xd8510799a5d14dfe", "trace_id": "0x7ec08d5741617e02f08def5d37613c11"}, "parent_id": null, "start_time": 1744310478244455635, "end_time": 1744310478248604073, "status_code": "ERROR", "status_message": "OpenAIError: The api_key client option must be set either by passing api_key to the client or by setting the OPENAI_API_KEY environment variable", "attributes": {"mlflow.traceRequestId": "\"42a054758f914d929882652350cce863\"", "mlflow.spanType": "\"Chain\"", "mlflow.spanFunctionName": "\"llm_text_retrieval\"", "mlflow.spanInputs": "{\"args\": \"Namespace(path_to_db_vectors='/home/mbogolta/HOMEMATCH/data_storage/db_vectors_listings', user_query='253971(cat query.txt)')\"}"}, "events": [{"name": "exception", "timestamp": 1744310478248557279, "attributes": {"exception.type": "openai.OpenAIError", "exception.message": "The api_key client option must be set either by passing api_key to the client or by setting the OPENAI_API_KEY environment variable", "exception.stacktrace": "Traceback (most recent call last):\n  File \"/home/mbogolta/miniconda3/envs/homematch_venv/lib/python3.11/site-packages/opentelemetry/trace/__init__.py\", line 587, in use_span\n    yield span\n  File \"/home/mbogolta/miniconda3/envs/homematch_venv/lib/python3.11/site-packages/mlflow/tracing/fluent.py\", line 269, in start_span\n    yield mlflow_span\n  File \"/home/mbogolta/miniconda3/envs/homematch_venv/lib/python3.11/site-packages/mlflow/tracing/fluent.py\", line 145, in _wrapping_logic\n    result = yield  # sync/async function output to be sent here\n             ^^^^^\n  File \"/home/mbogolta/miniconda3/envs/homematch_venv/lib/python3.11/site-packages/mlflow/tracing/fluent.py\", line 175, in wrapper\n    return wrapping_coro.send(fn(*args, **kwargs))\n                              ^^^^^^^^^^^^^^^^^^^\n  File \"/home/mbogolta/HOMEMATCH/retrieval_generation/retrieval_generation.py\", line 58, in llm_text_retrieval\n    llm_openai = ChatOpenAI(model=\"gpt-4o-mini\", temperature=0.7, max_tokens=2000, api_key=os.getenv(\"OPENAI_API_KEY\"))\n                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/mbogolta/miniconda3/envs/homematch_venv/lib/python3.11/site-packages/langchain_core/load/serializable.py\", line 130, in __init__\n    super().__init__(*args, **kwargs)\n  File \"/home/mbogolta/miniconda3/envs/homematch_venv/lib/python3.11/site-packages/pydantic/main.py\", line 253, in __init__\n    validated_self = self.__pydantic_validator__.validate_python(data, self_instance=self)\n                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/mbogolta/miniconda3/envs/homematch_venv/lib/python3.11/site-packages/langchain_openai/chat_models/base.py\", line 622, in validate_environment\n    self.root_client = openai.OpenAI(**client_params, **sync_specific)  # type: ignore[arg-type]\n                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/mbogolta/miniconda3/envs/homematch_venv/lib/python3.11/site-packages/openai/_client.py\", line 116, in __init__\n    raise OpenAIError(\nopenai.OpenAIError: The api_key client option must be set either by passing api_key to the client or by setting the OPENAI_API_KEY environment variable\n", "exception.escaped": "False"}}]}], "request": "{\"args\": \"Namespace(path_to_db_vectors='/home/mbogolta/HOMEMATCH/data_storage/db_vectors_listings', user_query='253971(cat query.txt)')\"}", "response": null}